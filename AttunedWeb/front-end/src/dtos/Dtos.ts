//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { UTCDateTime } from './UTCDateTime.ts';
import { TimeSpan } from './TimeSpan.ts';
import { Rating } from './Rating.ts';

export interface ImageDto
{
	Image: string;
	TrackIds: number[];
}
export interface TrackDetailsDto
{
	Id: number;
	Location: string;
	Media: "Music";
	Size: number | undefined;
	DateModified: UTCDateTime;
	DateAdded: UTCDateTime;
	BitRate: number | undefined;
	SampleRate: number | undefined;
	TotalTime: TimeSpan | undefined;
	Year: number | undefined;
	Bpm: number | undefined;
	DiscNumber: number | undefined;
	DiscCount: number | undefined;
	TrackNumber: number | undefined;
	TrackCount: number | undefined;
	Name: string;
	Artist: string;
	Composer: string;
	Album: string;
	Genre: string;
	PlayCount: number | undefined;
	PlayDate: UTCDateTime | undefined;
	SkipCount: number | undefined;
	Rating: number;
	Loved: boolean | undefined;
	Channels: number | undefined;
	Type: string;
	Codec: string;
	CoverArt: string;
}
export interface TrackDto
{
	Id: number;
	Location: string;
	Media: "Music";
	Size: number | undefined;
	DateModified: UTCDateTime;
	DateAdded: UTCDateTime;
	BitRate: number | undefined;
	SampleRate: number | undefined;
	TotalTime: TimeSpan | undefined;
	Year: number | undefined;
	Bpm: number | undefined;
	DiscNumber: number | undefined;
	DiscCount: number | undefined;
	TrackNumber: number | undefined;
	TrackCount: number | undefined;
	Name: string;
	Artist: string;
	Composer: string;
	Album: string;
	Genre: string;
	PlayCount: number | undefined;
	PlayDate: UTCDateTime | undefined;
	SkipCount: number | undefined;
	Rating: number;
	Loved: boolean | undefined;
}
export interface BooleanRuleDto
{
	Field: BoolFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	RuleType: "Boolean";
}
export interface DateRuleDto
{
	Field: DateFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: UTCDateTime;
	ValueB: UTCDateTime | undefined;
	RuleType: "Date";
}
export interface DictionaryRuleDto
{
	Field: DictionaryFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: string;
	RuleType: "Dictionary";
}
export interface IntRuleDto
{
	Field: IntFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: number;
	ValueB: number | undefined;
	RuleType: "Int";
}
export interface PlaylistRuleDto
{
	FieldDto: PlaylistFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: string;
	RuleType: "Playlist";
}
export interface RatingRuleDto
{
	RuleType: "Rating";
	Field: "Rating";
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: Rating;
	ValueB: Rating | undefined;
}
export interface StringRuleDto
{
	Field: StringFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: string;
	RuleType: "String";
}
export interface TimeSpanRuleDto
{
	Field: DateFieldsDto;
	Operator: OperatorDto;
	Sign: SignDto;
	ValueA: TimeSpan;
	RuleType: "TimeSpan";
}
export interface PlaylistDetailsDto
{
	Id: number;
	Name: string;
	Items: number[];
	IsSmart: boolean;
	Limit: LimitDto | undefined;
	RuleConjunction: ConjunctionDto | undefined;
	LiveUpdating: boolean;
}
export interface PlaylistDto
{
	Id: number;
	Name: string;
	IsSmart: boolean;
}
export enum OperatorDto {
	Is = "Is",
	Contains = "Contains",
	Starts = "Starts",
	Ends = "Ends",
	Greater = "Greater",
	Less = "Less",
	Between = "Between"
}
export enum SignDto {
	Positive = "Positive",
	Negative = "Negative"
}
export interface LimitDto
{
	IsLimited: boolean;
	OnlyChecked: boolean;
	SortField: SortFieldDto;
	SortDirection: SortDirection;
	Units: LimitUnitsDto;
	Amount: number;
}
export enum LimitUnitsDto {
	Minutes = "Minutes",
	MB = "MB",
	Items = "Items",
	Hours = "Hours",
	GB = "GB"
}
export enum SortDirection {
	Ascending = "Ascending",
	Descending = "Descending"
}
export enum SortFieldDto {
	Random = "Random",
	Name = "Name",
	Album = "Album",
	Artist = "Artist",
	Genre = "Genre",
	Rating = "Rating",
	LastPlayed = "LastPlayed",
	PlayCount = "PlayCount",
	DateAdded = "DateAdded"
}
export enum iCloudStatusDto {
	Purchased = "Purchased",
	Matched = "Matched",
	Uploaded = "Uploaded",
	Ineligible = "Ineligible",
	LocalOnly = "Local Only",
	Duplicate = "Duplicate"
}
export enum LocationDto {
	Computer = "Computer",
	iCloud = "iCloud"
}
export enum LoveDto {
	None = "None",
	Loved = "Loved",
	Dislike = "Dislike"
}
export enum MediaDto {
	Music = "Music",
	Movie = "Movie",
	Podcast = "Podcast",
	Audiobook = "Audiobook",
	MusicVideo = "Music Video",
	TvShow = "TV Show",
	HomeVideo = "Home Video",
	iTunesExtras = "iTunes Extras",
	VoiceMemo = "Voice Memo",
	iTunesU = "iTunes U",
	Book = "Book",
	BookOrAudiobook = "Book or Audiobook",
	UndesiredMusic = "Undesired Music",
	UndesiredOther = "Undesired Other"
}
export enum BoolFieldsDto {
	HasArtwork = "HasArtwork",
	Purchased = "Purchased",
	Checked = "Checked"
}
export enum DateFieldsDto {
	DateAdded = "DateAdded",
	DateModified = "DateModified",
	LastPlayed = "LastPlayed",
	LastSkipped = "LastSkipped"
}
export enum DictionaryFieldsDto {
	MediaKind = "MediaKind",
	Location = "Location",
	iCloudStatus = "iCloudStatus",
	Love = "Love"
}
export enum IntFieldsDto {
	Bpm = "Bpm",
	BitRate = "BitRate",
	Compilation = "Compilation",
	DiskNumber = "DiskNumber",
	Plays = "Plays",
	Rating = "Rating",
	Podcast = "Podcast",
	SampleRate = "SampleRate",
	Season = "Season",
	Size = "Size",
	Skips = "Skips",
	Duration = "Duration",
	TrackNumber = "TrackNumber",
	Year = "Year"
}
export enum PlaylistFieldsDto {
	PlaylistPersistentID = "PlaylistPersistentID"
}
export enum StringFieldsDto {
	Album = "Album",
	AlbumArtist = "AlbumArtist",
	Artist = "Artist",
	Category = "Category",
	Comments = "Comments",
	Composer = "Composer",
	Description = "Description",
	Genre = "Genre",
	Grouping = "Grouping",
	Kind = "Kind",
	Name = "Name",
	Show = "Show",
	SortAlbum = "SortAlbum",
	SortAlbumArtist = "SortAlbumArtist",
	SortComposer = "SortComposer",
	SortName = "SortName",
	SortShow = "SortShow",
	VideoRating = "VideoRating"
}
export interface ConjunctionDto
{
	Type: number;
	SubConjunctions: ConjunctionDto[];
	Rules: (BooleanRuleDto | DateRuleDto | DictionaryRuleDto | IntRuleDto | RatingRuleDto | PlaylistRuleDto | StringRuleDto | TimeSpanRuleDto)[];
}
